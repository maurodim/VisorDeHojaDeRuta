/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package interfacePedidos;

import interfacePedidos.objetosExportacion.PedidoGuardado;
import interfacePedidos.procesosDelExportadorDePedidos.ExportacionDePedidos;
import interfacePedidos.tablas.TablaExportacion;
import interfacesPrograma.Busquedas;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import javax.swing.JCheckBox;
import javax.swing.Timer;
import objetos.AlertasDeRepartos;
import facturacion.clientes.ClientesTango;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.text.ParseException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import objetos.Mensajeria.Mail;

import objetos.PedidosParaReparto;
import objetos.ZonasDeDistribucion;
import visordehojaderuta.VisorDeHojaDeRuta;



/**
 *
 * @author Mauro Di
 */
public class EditorDePedidos extends javax.swing.JInternalFrame {

    /**
     * Creates new form EditorDePedidos
     */
    private ArrayList listadoDePedidos=new ArrayList();
    static String fechaPedido;
    private JCheckBox checkBox2;
    private static String operad;
    private int idVendedor;
    private String sEmpresa;
    private String fechaPedidoT;
    
    
    public EditorDePedidos() {
        //operad=VisorDeHojaDeRuta.tG.getNombre()
        validarEnvio();
        initComponents();
        
    }
    public EditorDePedidos(ArrayList pedidosSel) {
        //operad=VisorDeHojaDeRuta.tG.getNombre()
        listadoDePedidos=pedidosSel;
        validarEnvio();
        
        initComponents();
        TablaExportacion tablaExp=new TablaExportacion();
        PedidosParaReparto ped;

        tablaExp.addColumn("Razon Social");
        tablaExp.addColumn("Reparto");
        tablaExp.addColumn("Proceso");
        tablaExp.addColumn("Asignacion");
        tablaExp.addColumn("Descripcion Articulo");
        tablaExp.addColumn("Cant. Pendiente");
        tablaExp.addColumn("Nro Pedido");
        tablaExp.addColumn("Fecha Asignada");
        tablaExp.addColumn("Eliminar");
        tablaExp.addColumn("Bloquear");
        tablaExp.addColumn("Cant s/fecha de ent. asig.");
        Object[] fila=new Object[11];
        Iterator il=listadoDePedidos.listIterator();
        int columna=0;
            while(il.hasNext()){
                ped=(PedidosParaReparto)il.next();
                fila[0]=ped.getRazonSocial();
                Boolean reparto=true;
                Boolean proceso=true;
                Boolean eliminar=false;
                Boolean asignacion=true;
                if(ped.getMarcadoParaReparto()==0){
                reparto=false;
                }
                if(ped.getMarcadoParaProceso()==0){
                proceso=false;
                }

                fila[1]=reparto;
                fila[2]=proceso;
                fila[3]=asignacion;
                fila[4]=ped.getDescripcionArticulo();
                fila[5]=ped.getCantidadArticulo();
                fila[6]=ped.getCodigoTangoDePedido();
                fila[7]=ped.getFechaEnvio();
                fechaPedido=ped.getFechaEnvio();
                fila[8]=eliminar;
                String validarComprobante=ped.getNumeroComprobante().substring(0,1);
                validarComprobante.trim();
                System.out.println(validarComprobante);
                if((ped.getCantidadArticulo()==0) && (validarComprobante.equals("X"))){
                fila[9]=true;
                }else{
                fila[9]=false;
                }
                fila[10]=0.00;
                tablaExp.addRow(fila);
                columna++;
        }
        jTable1.setModel(tablaExp);
        recargarFormulario();
        this.jButton1.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaExportacion tablaExp=new TablaExportacion();
        jTable1 = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        ZonasDeDistribucion zon=new ZonasDeDistribucion();
        ArrayList lista=new ArrayList();
        Busquedas busZ=new ZonasDeDistribucion();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        AlertasDeRepartos al=new AlertasDeRepartos();
        Busquedas Bal=new AlertasDeRepartos();
        ArrayList listadoAlertas=new ArrayList();
        listadoAlertas=Bal.listar("");
        Iterator illL=listadoAlertas.listIterator();
        String nombreCombo=null;
        while(illL.hasNext()){
            al=(AlertasDeRepartos)illL.next();
            //    nombreCombo="checkBox1"+al.getNumeroDeAlertas();
            //nombreCombo=new javax.swing.JCheckBox();
            switch (al.getNumeroDeAlertas())
            {
                case 1:
                checkBox1 = new javax.swing.JCheckBox();
                jPanel2 = new javax.swing.JPanel();
                jButton2 = new javax.swing.JButton();
                jButton1 = new javax.swing.JButton();
                jButton4 = new javax.swing.JButton();
                jButton5 = new javax.swing.JButton();

                setClosable(true);
                setMaximizable(true);
                setTitle("Editor de Pedidos - SIDERCON - Operador :"+VisorDeHojaDeRuta.tG.getOperador());
                addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
                    public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                        formInternalFrameActivated(evt);
                    }
                    public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                    }
                    public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                    }
                    public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                    }
                    public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                    }
                    public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                    }
                    public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                    }
                });

                jLabel1.setText("Seleccione fecha de entrega :");

                dateChooserCombo1.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
                    public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                        dateChooserCombo1OnSelectionChange(evt);
                    }
                });

                PedidosParaReparto ped=new PedidosParaReparto();
                jTable1.setModel(tablaExp);
                tablaExp.addColumn("Razon Social");
                tablaExp.addColumn("Reparto");
                tablaExp.addColumn("Proceso");
                tablaExp.addColumn("Asignacion");
                tablaExp.addColumn("Descripcion Articulo");
                tablaExp.addColumn("Cant. Pendiente");
                tablaExp.addColumn("Nro Pedido");
                tablaExp.addColumn("Fecha Asignada");
                tablaExp.addColumn("Eliminar");
                tablaExp.addColumn("Bloquear");
                tablaExp.addColumn("Cant s/fecha de ent. asig.");
                Object[] fila=new Object[11];
                Iterator il=listadoDePedidos.listIterator();
                int columna=0;
                while(il.hasNext()){
                    ped=(PedidosParaReparto)il.next();
                    fila[0]=ped.getRazonSocial();
                    Boolean reparto=true;
                    Boolean proceso=true;
                    Boolean eliminar=false;
                    Boolean asignacion=true;
                    if(ped.getMarcadoParaReparto()==0){
                        reparto=false;
                    }
                    if(ped.getMarcadoParaProceso()==0){
                        proceso=false;
                    }

                    fila[1]=reparto;
                    fila[2]=proceso;
                    fila[3]=asignacion;
                    fila[4]=ped.getDescripcionArticulo();
                    fila[5]=ped.getCantidadArticulo();
                    fila[6]=ped.getCodigoTangoDePedido();
                    fila[7]=ped.getFechaEnvio();
                    fechaPedido=ped.getFechaEnvio();
                    fila[8]=eliminar;
                    String validarComprobante=ped.getNumeroComprobante().substring(0,1);
                    validarComprobante.trim();
                    System.out.println(validarComprobante);
                    if((ped.getCantidadArticulo()==0) && (validarComprobante.equals("X"))){
                        fila[9]=true;
                    }else{
                        fila[9]=false;
                    }
                    fila[10]=0.00;
                    tablaExp.addRow(fila);
                    columna++;
                }
                recargarFormulario();
                this.jButton1.setEnabled(false);
                //this.jButton3.setEnabled(false);
                jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jTable1MouseClicked(evt);
                    }
                });
                jScrollPane1.setViewportView(jTable1);

                lista=busZ.listar("");
                Iterator ilL=lista.listIterator();
                while(ilL.hasNext()){
                    zon=(ZonasDeDistribucion)ilL.next();
                    jComboBox1.addItem(zon.getDescripcionDeZona());
                }
                jComboBox1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jComboBox1ActionPerformed(evt);
                    }
                });

                jLabel2.setText("Seleccionar Zona");

                checkBox1.setText(al.getDescripcionAlertas());
                break;
                case 2:
                checkBox2=new javax.swing.JCheckBox();
                checkBox2.setText(al.getDescripcionAlertas());
                this.jPanel1.add(checkBox2);
                break;

                default:
                checkBox1 = new javax.swing.JCheckBox();

                checkBox1.setText(al.getDescripcionAlertas());
                break;

            }
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 996, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(checkBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(checkBox1)
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jButton2.setText("Guardar");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("<<< Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Actualizar");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Eliminar");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int cantidadFilas=listadoDePedidos.size();
        System.out.println("cantidad de filas "+cantidadFilas);
        PedidosParaReparto ped=new PedidosParaReparto();
        ExportacionDePedidos exp=new PedidoGuardado();
        jProgressBar1.setMaximum(cantidadFilas);
        for(int i=0;i < cantidadFilas;i++){
            ped=(PedidosParaReparto)listadoDePedidos.get(i);
            int marcadoReparto=0;
            int marcadoProceso=0;
            System.out.println("Empresa "+ped.getEmpresa());
            Double cantidad=(Double)jTable1.getValueAt(i,5);
            Double acopio=(Double)jTable1.getValueAt(i,10);
            //String ac=(String) jTable1.getValueAt(i,10);
            //acopio=Double.parseDouble(ac);
            cantidad=cantidad - acopio;
            jTable1.setValueAt(cantidad, i,5);
            
            //Boolean rep=(Boolean) jTable1.getValueAt(i,1);
            if((Boolean)jTable1.getValueAt(i,1)){
              marcadoReparto=1;  
            }
            if((Boolean)jTable1.getValueAt(i,2)){
                marcadoProceso=1;
            }
            
            ped.setMarcadoParaProceso(marcadoProceso);
            ped.setMarcadoParaReparto(marcadoReparto);
            ped.setDescripcionArticulo((String)jTable1.getValueAt(i,4));
            Double cantidadA=(Double)jTable1.getValueAt(i, 5);
            ped.setCantidadArticulo(cantidadA);
            //String enAcopio=(String)jTable1.getValueAt(i,10);
                //acopio=Double.parseDouble(enAcopio);
            ped.setCantidadArticuloPendiente(acopio);
            if((Boolean)jTable1.getValueAt(i,3)){
                ped.setFechaEnvio(fechaPedido);
            }else{
            String fechaEnvio="";
            fechaEnvio=(String) jTable1.getValueAt(i,7);
            System.out.println(fechaEnvio);
            //fechaEnvio.trim();
            if(fechaEnvio!=null){
                DecimalFormat fr=new DecimalFormat("00");
                Calendar c1=Calendar.getInstance();
                Calendar c2=new GregorianCalendar();
                String dia=Integer.toString(c2.get(Calendar.DAY_OF_MONTH));
                String mes=Integer.toString(c2.get(Calendar.MONTH));
                String ano=Integer.toString(c2.get(Calendar.YEAR));

                int da=Integer.parseInt(dia);
                int me=Integer.parseInt(mes);
                me++;
                dia=fr.format(da);
                mes=fr.format(me);
                fechaEnvio=dia+"/"+mes+"/"+ano;
                System.err.println(" FECHA INICIALIZADA EN "+dia+"/"+mes+"/"+ano);
                //fechaEnvio="00/00/0000";
            }
            ped.setFechaEnvio(fechaEnvio);
            }
            if((Boolean)jTable1.getValueAt(i,3)){
                int alerta=0;
                int zona=0;
                if(checkBox1.isSelected()){
                    alerta=1;
                }
                if(jComboBox1.getSelectedIndex()> 0){
                    zona=jComboBox1.getSelectedIndex()+1;
                }
                ped.setZonaAsignada(zona);
                ped.setAlertaAsignada(alerta);
                System.out.println("ALERTA SELECCIONADA "+alerta+" ZONA ELEGIDA "+zona);
            }
         }

        Boolean verificacionExito=true;
        verificacionExito=exp.guardar(listadoDePedidos);
        if(verificacionExito){
            listadoDePedidos.clear();
            listadoDePedidos=exp.leer();
        }else{
            System.err.println("NO SE GUARDARON LAS MODIFICACIONES");
        }
        jProgressBar1.setValue(0);
        this.jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void dateChooserCombo1OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserCombo1OnSelectionChange
        leerChooser();
    }//GEN-LAST:event_dateChooserCombo1OnSelectionChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ArrayList enviosPed=new ArrayList();
        int cantidadItems=jTable1.getRowCount();
        ExportacionDePedidos exp=new PedidoGuardado();
        
        for(int i=0;i <cantidadItems;i++){
            PedidosParaReparto ped=new PedidosParaReparto();
            ClientesTango cli=new ClientesTango();
            ped=(PedidosParaReparto)listadoDePedidos.get(i);
            cli.setCodigoCliente(ped.getCodigoCliente());
            cli.setRazonSocial(ped.getRazonSocial());
            if(ped.getCodigoTangoDePedido().equals("000000000")){
                
            }else{
            if(exp.validarCliente(cli)){
                System.err.println("YA EXISTE EL CLIENTE");
            }else{
                cli.setDireccion(ped.getObservaciones1());
                if(exp.actualizarDatosClientes(cli)){
                    System.out.println("SE ACTUALIZARON LOS DATOS DEL CLIENTE");
                }else{
                    System.err.println("NO SE ACTUALIZARON LOS DATOS");
                }
            }
            }
            
            
        }
        
        int maxim=listadoDePedidos.size() + 1;
        jProgressBar1.setMaximum(maxim);
        Iterator ill=listadoDePedidos.listIterator();
        ArrayList lstEnviar=new ArrayList();
        String empresa = null;
        String cliente = null;
        String nPedido = null;
        String fechEnv=VisorDeHojaDeRuta.fecha;
        int aaa=0;
        while(ill.hasNext()){
            PedidosParaReparto ped=(PedidosParaReparto)ill.next();
            jProgressBar1.setValue(aaa);
            
            System.err.println(ped.getCodigoTangoDePedido()+" fecha "+ped.getFechaPedidosTango()+" entrega "+ped.getFechaEnvio()+" EMPRESA "+ped.getEmpresa());
            String fPedido=ped.getFechaPedidosTango();
            
            String fEnvio=ped.getFechaEnvio();
            if(fEnvio.length() > 10)fEnvio.substring(0,10);
            int marcadoReparto=0;
            int marcadoProceso=0;
            Double cantidad=(Double)jTable1.getValueAt(aaa,5);
            Double acopio=(Double)jTable1.getValueAt(aaa,10);
            if((Boolean)jTable1.getValueAt(aaa,1)){
              marcadoReparto=1;  
            }
            if((Boolean)jTable1.getValueAt(aaa,2)){
                marcadoProceso=1;
            }
            
            ped.setMarcadoParaProceso(marcadoProceso);
            ped.setMarcadoParaReparto(marcadoReparto);
            ped.setDescripcionArticulo((String)jTable1.getValueAt(aaa,4));
            Double cantidadA=(Double)jTable1.getValueAt(aaa, 5);
            ped.setCantidadArticulo(cantidadA);
            //String enAcopio=(String)jTable1.getValueAt(i,10);
                //acopio=Double.parseDouble(enAcopio);
            ped.setCantidadArticuloPendiente(acopio);
            if((Boolean)jTable1.getValueAt(aaa,3)){
                ped.setFechaEnvio(fechaPedido);
            }else{
            String fechaEnvio="";
            fechaEnvio=(String) jTable1.getValueAt(aaa,7);
            System.out.println(fechaEnvio);
            //fechaEnvio.trim();
            if(fechaEnvio!=null){
                DecimalFormat fr=new DecimalFormat("00");
                Calendar c1=Calendar.getInstance();
                Calendar c2=new GregorianCalendar();
                String dia=Integer.toString(c2.get(Calendar.DAY_OF_MONTH));
                String mes=Integer.toString(c2.get(Calendar.MONTH));
                String ano=Integer.toString(c2.get(Calendar.YEAR));

                int da=Integer.parseInt(dia);
                int me=Integer.parseInt(mes);
                me++;
                dia=fr.format(da);
                mes=fr.format(me);
                fechaEnvio=dia+"/"+mes+"/"+ano;
                System.err.println(" FECHA INICIALIZADA EN "+dia+"/"+mes+"/"+ano);
                //fechaEnvio="00/00/0000";
            }
            ped.setFechaEnvio(fechaEnvio);
            }
            if((Boolean)jTable1.getValueAt(aaa,3)){
                int alerta=0;
                int zona=0;
                if(checkBox1.isSelected()){
                    alerta=1;
                }
                if(jComboBox1.getSelectedIndex()> 0){
                    zona=jComboBox1.getSelectedIndex()+1;
                }
                ped.setZonaAsignada(zona);
                ped.setAlertaAsignada(alerta);
                System.out.println("ALERTA SELECCIONADA "+alerta+" ZONA ELEGIDA "+zona);
            }
            
            if(fEnvio == null){
                DecimalFormat fr=new DecimalFormat("00");
                Calendar c1=Calendar.getInstance();
                Calendar c2=new GregorianCalendar();
                String dia=Integer.toString(c2.get(Calendar.DAY_OF_MONTH));
                String mes=Integer.toString(c2.get(Calendar.MONTH));
                String ano=Integer.toString(c2.get(Calendar.YEAR));

                int da=Integer.parseInt(dia);
                int me=Integer.parseInt(mes);
                me++;
                dia=fr.format(da);
                mes=fr.format(me);
                fechEnv=ped.getFechaEnvio();
                //pedi.setFechaEnvio(fechEnv);
                //ped.setFechaEnvio(fechEnv);
                lstEnviar.add(ped);
            }
            System.out.println("Empresa.....: "+ped.getEmpresa());
            empresa=ped.getEmpresa();
            nPedido=ped.getCodigoTangoDePedido();
            cliente=ped.getRazonSocial();
            aaa++;   
        }
        
        if(exp.enviar(listadoDePedidos)){
            
            aaa++;
            //arma el pdf y lo envia por mail con todo el material del array
            //Mail mail=new Mail();
            Mail mail=new Mail();
            
            Iterator itLstP=listadoDePedidos.listIterator();
            while(itLstP.hasNext()){
                PedidosParaReparto ped=(PedidosParaReparto) itLstP.next();
                if(ped.getMarcadoParaReparto()==1){
                    enviosPed.add(ped);
                    fechEnv=ped.getFechaEnvio();
                    System.out.println(fechEnv);
                }
            }
            String dia_sem = null;
            try {
                dia_sem = fechaCalendario(fechEnv);
            } catch (IOException ex) {
                Logger.getLogger(EditorDePedidos.class.getName()).log(Level.SEVERE, null, ex);
            }
            String encabezado="Reparto - "+dia_sem+" "+fechEnv+" - "+empresa+" - "+nPedido+" - "+cliente;
            System.out.println(encabezado);
            mail.enviarMailDeEnvioDePedido(encabezado,enviosPed,"");
            enviosPed.clear();
            jProgressBar1.setValue(aaa);
            JOptionPane.showMessageDialog(this,"Pedido Enviado al Sistema HDR");
        }else{
            String msj=" LO SIENTO HA OCURRIDO UN ERROR EN EL ENVIO \n POR FAVOR INTENTELO NUEVAMENTE LUEGO.\n GRACIAS";
            exp.notificar(msj);
        }
        
          listadoDePedidos.clear();
          this.dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
       int fila=jTable1.getSelectedRow();
       jButton1.setEnabled(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        validarEnvio();  
        ExportacionDePedidos exx=new PedidoGuardado();
          exx.guardar(listadoDePedidos);
          listadoDePedidos.clear();
/*
          int cantidadFilas=jTable1.getRowCount();
          for(int a=0;a < cantidadFilas;a++){
              System.out.println("renglon n° "+a+" cantidad filas "+cantidadFilas);
              jTable1.remove(a);
          }
*/
//jTable1.removeAll();
          listadoDePedidos=exx.leer();
          System.out.println("ESTA EN EL BUCLE");
          cargarTabla();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int cantidadFilas=jTable1.getRowCount();
        ArrayList numerosAEliminar=new ArrayList();
        PedidosParaReparto pedid=new PedidosParaReparto();
        int filasAEliminar=0;
        for(int a=0;a < cantidadFilas;a++){
            if((Boolean)jTable1.getValueAt(a,8)){
                pedid=(PedidosParaReparto)listadoDePedidos.get(a);
                numerosAEliminar.add(pedid.getiDPedido());
                filasAEliminar++;
               // listadoDePedidos.remove(a);
            }
        }

        /*
        for(int aa=0;aa < filasAEliminar;aa++){
            jTable1.remove(aa);
        }
        */
        
        ExportacionDePedidos exp=new PedidoGuardado();
        exp.eliminarItems(numerosAEliminar);
        listadoDePedidos.clear();
        listadoDePedidos=exp.leer();
        cargarTabla();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        if(listadoDePedidos.size() == 0){
            JOptionPane.showMessageDialog(this,"Por Favor Selecciones un Pedido no Pasado a Sistema HDR. Gracias");
            this.dispose();
        }
    }//GEN-LAST:event_formInternalFrameActivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBox1;
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
private void leerChooser(){
            
        DecimalFormat fr=new DecimalFormat("00");
        DecimalFormat formato=new DecimalFormat("####.##");
        //SiderconCapaatos.listaPedidos.clear();
        SimpleDateFormat dia=new SimpleDateFormat("dd/mm/yyyy");
        //Date mes=Calendar.getInstance().getTime();
        //dateChooserCombo1.setDateFormat(dia);
        Calendar fechaNueva=dateChooserCombo1.getSelectedDate();
        //mes=dia.format(fechaNueva,null,null);
        Double pesoDia=0.00;
        int ano=fechaNueva.get(Calendar.YEAR);
        int mes=fechaNueva.get(Calendar.MONTH);
        mes++;
        int dd=fechaNueva.get(Calendar.DAY_OF_MONTH);
        
        //String fechaNueva=dateChooserCombo1.getText();
        //String fechaNueva=dateChooserCombo1.getSelectedDate();
        //String seleccion1=fechaNueva.toString();
        String seleccion=fr.format(dd)+"/"+fr.format(mes)+"/"+ano;
        //seleccion=new SimpleDateFormat(seleccion1).format(mes);
        fechaPedido=seleccion;
        int cantidadFilas=jTable1.getRowCount();
        PedidosParaReparto ped=new PedidosParaReparto();
        try{
        for(int i=0;i <cantidadFilas;i++){
            if((Boolean)jTable1.getValueAt(i,9)){
                
            }else{
                if((Boolean)jTable1.getValueAt(i,3)){
                    jTable1.setValueAt(fechaPedido, i,7);
                    ped=(PedidosParaReparto)listadoDePedidos.get(i);
                    ped.setFechaEnvio(fechaPedido);
                }
            }
        }
        }catch(Exception ex){
            System.err.println("SALTO EL ERROR ESPERADO");
        }

}
public void recargarFormulario(){
        Timer timer=new Timer(120000,new ActionListener(){ 
    public void actionPerformed(ActionEvent e) 
    { 
        validarEnvio();  
        ExportacionDePedidos exx=new PedidoGuardado();
          exx.guardar(listadoDePedidos);
          listadoDePedidos.clear();
/*
          int cantidadFilas=jTable1.getRowCount();
          for(int a=0;a < cantidadFilas;a++){
              System.out.println("renglon n° "+a+" cantidad filas "+cantidadFilas);
              jTable1.remove(a);
          }
*/
//jTable1.removeAll();
          listadoDePedidos=exx.leer();
          System.out.println("ESTA EN EL BUCLE");
          cargarTabla();
     } 
}); 
        timer.start();
}
private void cargarTabla(){
        //String fecha=fechaPedido;       System.out.println("cantidad array "+listadoDePedidos.size());
    System.err.println("ENTRO A LA FUNCION");
    TablaExportacion modelo=new TablaExportacion();
    PedidosParaReparto ped=new PedidosParaReparto();
    ArrayList listado=new ArrayList();
    //String nPedido=numeroDePedido;
    //String fcPedido=fechaPedido;
    System.out.println(" tamaño listado "+listadoDePedidos.size());
    Iterator iy=listadoDePedidos.listIterator();
    //jTable1 = new javax.swing.JTable();
    //jTable1.removeAll();
    DecimalFormat fr=new DecimalFormat("00");
        Calendar c1=Calendar.getInstance();
	Calendar c2=new GregorianCalendar();
	String dia=Integer.toString(c2.get(Calendar.DAY_OF_MONTH));
	String mes=Integer.toString(c2.get(Calendar.MONTH));
	String ano=Integer.toString(c2.get(Calendar.YEAR));
	
        int da=Integer.parseInt(dia);
        int me=Integer.parseInt(mes);
        me++;
        dia=fr.format(da);
        mes=fr.format(me);
        String fechaActual=dia+"/"+mes+"/"+ano;
        dateChooserCombo1.setSelectedDate(c2);
        //dateChooserCombo1.setText(fechaActual);
    jTable1.setModel(modelo);
    modelo.addColumn("Razon social");
    modelo.addColumn("Reparto");
    modelo.addColumn("Proceso");
    modelo.addColumn("Asignado");
    modelo.addColumn("Desc Articulo");
    modelo.addColumn("Cantidad");
    modelo.addColumn("Nro Pedido");
    modelo.addColumn("Fecha Asignada");
    modelo.addColumn("Eliminar");
    modelo.addColumn("Bloqueado");
    modelo.addColumn("cant. s/fecha asig.");
    Object[] fila=new Object[11];
    while(iy.hasNext()){
           ped=(PedidosParaReparto)iy.next();
            fila[0]=ped.getRazonSocial();
            Boolean reparto=true;
            Boolean proceso=true;
            Boolean eliminar=false;
            Boolean asignacion=true;
            if(ped.getMarcadoParaReparto()==0){
                reparto=false;
            }
            if(ped.getMarcadoParaProceso()==0){
                proceso=false;
            }

            fila[1]=reparto;
            fila[2]=proceso;
            fila[3]=asignacion;
            fila[4]=ped.getDescripcionArticulo();
            fila[5]=ped.getCantidadArticulo();
            fila[6]=ped.getCodigoTangoDePedido();
            fila[7]=ped.getFechaEnvio();
            fechaPedido=ped.getFechaEnvio();
            fila[8]=eliminar;
            String validarComprobante=ped.getNumeroComprobante().substring(0,1);
            validarComprobante.trim();
            System.out.println(validarComprobante);
            if((ped.getCantidadArticulo()==0) && (validarComprobante.equals("X"))){
                fila[9]=true;
            }else{
                fila[9]=false;
            }
            fila[10]=ped.getCantidadArticuloPendiente();
            modelo.addRow(fila);
    }
    
    //jPanel1.repaint();

        //String nPedido=ListadoDePedidosParaReparto.numeroDePedido;
  
    }   
private void validarEnvio(){
        ExportacionDePedidos exp=new PedidoGuardado();
        ArrayList verificado=new ArrayList();
        Iterator it=listadoDePedidos.listIterator();
        PedidosParaReparto pedid;
        String fechasPedidos = null;
        String resultado=null;
        int aa=0;
        while(it.hasNext()){
            pedid=(PedidosParaReparto) it.next();
            resultado=exp.validarEnviadoHdr(pedid);
            if(resultado !=null){
                fechasPedidos+=resultado;
                
            }else{
                //listadoDePedidos.remove(aa);
                verificado.add(pedid);
            }
            
            aa++;
        }
        if(fechasPedidos !=null){
                exp.notificar(fechasPedidos);
            }
        listadoDePedidos.clear();
        listadoDePedidos=verificado;
        
}
private String fechaCalendario(String fecha) throws IOException{
    String Valor_dia = null;
    FileWriter archivos = null;
    PrintWriter pw = null;
        try {
            archivos = new FileWriter("informes.txt",true);
            pw=new PrintWriter(archivos);
        } catch (IOException ex) {
            Logger.getLogger(EditorDePedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    //int posi=fecha.indexOf("/");
    int dd=Integer.parseInt(fecha.substring(0,2));
    int mm=Integer.parseInt(fecha.substring(3,5));
    int aa=Integer.parseInt(fecha.substring(6));
    
    SimpleDateFormat dia=new SimpleDateFormat("dd/mm/yyyy");
    Date fechaActual=null;
        try {
            fechaActual=dia.parse(fecha);
       
        Calendar fechaCalendario=Calendar.getInstance();
        /*fechaCalendario.setFirstDayOfWeek(0);
        fechaCalendario.set(Calendar.MONTH,mm);
        fechaCalendario.set(Calendar.DAY_OF_MONTH,dd);
        fechaCalendario.set(Calendar.YEAR, aa);
        */
        fechaCalendario.set(aa, mm -1, dd);
        //int numeroAn=fechaCalendario.get(Calendar.YEAR);
        //int numeroMes=fechaCalendario.get((Calendar.MONTH));
        int diaSemana = fechaCalendario.get(Calendar.DAY_OF_WEEK);
        /*
        if(numeroMes==12){
            numeroMes=numeroMes -1;
            fechaActual=dia.parse(diaSemana+"/"+numeroMes+"/"+numeroAn);
            fechaCalendario.setTime(fechaActual);
        }
        */
        System.out.println("dia de la semana................"+diaSemana);
        if (diaSemana == Calendar.SUNDAY) {
            Valor_dia = "Domingo";
        } else if (diaSemana == Calendar.MONDAY) {
            Valor_dia = "Lunes";
        } else if (diaSemana == Calendar.TUESDAY) {
            Valor_dia = "Martes";
        } else if (diaSemana == Calendar.WEDNESDAY) {
            Valor_dia = "Miercoles";
        } else if (diaSemana == Calendar.THURSDAY) {
            Valor_dia = "Jueves";
        } else if (diaSemana == Calendar.FRIDAY) {
            Valor_dia = "Viernes";
        } else if (diaSemana == Calendar.SATURDAY) {
            Valor_dia = "Sabado";
        }
        pw.println("Valor dia: "+Valor_dia+" / diaSemana: "+diaSemana+" /fecha: "+fecha+" /dia: "+dia+" /fechaActual: "+fechaActual+" /fechaCalendario: "+fechaCalendario);
        pw.println("Valor dia: "+diaSemana+" Valor Mes: "+mm+" Año: "+aa);
        pw.println("dia de la semana................"+diaSemana);
        
         } catch (ParseException ex) {
            Logger.getLogger(EditorDePedidos.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            archivos.close();
            return Valor_dia;
        }
    
    //return diaFecha;
}

}


